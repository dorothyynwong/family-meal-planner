name: Build and Push Docker image

on:
  push:
    branches:
      - staging 

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 1. Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USER }}  
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}  

    - name: 2. Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: image_tag.txt
      
    - name: 3. Set Image Tag
      run: IMAGE_TAG=$(cat image_tag.txt) && echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

    - name: 4. Push and Retag Docker image
      run: |
        docker pull ${{ secrets.DOCKER_HUB_USER }}/family-meal-planner-backend:${IMAGE_TAG}
        docker tag ${{ secrets.DOCKER_HUB_USER }}/family-meal-planner-backend:${IMAGE_TAG} ${{ secrets.DOCKER_HUB_USER }}/family-meal-planner-backend:staging
        docker push ${{ secrets.DOCKER_HUB_USER }}/family-meal-planner-backend:staging

    - name: 5. Trigger Render Deployment
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY_STAGING }}  
      run: |
        # Trigger deployment to Render
        curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_STAGING }} \
        -H "Authorization: Bearer $RENDER_API_KEY" \
        -H "Content-Type: application/json" \
        -d '{"branch": "staging"}'  

    - name: 6. Navigate to backend folder
      run: cd backend  

    - name: 7. Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'  

    - name: 8. Install EF Core CLI
      run: dotnet tool install --global dotnet-ef

    - name: 9. Build the backend
      run: dotnet build --configuration Release

    - name: 10. Run EF Core Migrations
      env:
        ConnectionStrings_DefaultConnection: ${{ secrets.CONNECTION_STRINGS_STAGING }}
        SendGrid_Email: ${{ secrets.SENDGRID_EMAIL }}
        SendGrid_API_Key: ${{ secrets.SENDGRID_API_KEY }}
        OpenAI_API_Key: ${{ secrets.OPENAI_API_KEY }}
        ImgBB_API_Key: ${{ secrets.IMGBB_API_KEY }}
        JWT_Issuer: ${{ secrets.JWT_ISSUER }}
        JWT_Audience: ${{ secrets.JWT_AUDIENCE }}
        JWT_AppName: ${{ secrets.JWT_APPNAME }}
        JWT_RefreshTokenName: ${{ secrets.JWT_REFRESHTOKENNAME }}
        JWT_Secret: ${{ secrets.JWT_SECRET }}
      run: |
        dotnet ef database update --project backend/backend.csproj --context FamilyMealPlannerContext